// Mocks generated by Mockito 5.0.2 from annotations
// in nucleus_one_dart_sdk/test/src/mocks/http.dart.
// Do not manually edit this file.

import 'dart:io' as _i2;
import 'dart:async' as _i4;
import 'dart:io' as _i3;

import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest extends _i1.Fake implements _i2.HttpClientRequest {
}

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeHttpHeaders extends _i1.Fake implements _i2.HttpHeaders {}

class _FakeHttpClientResponse extends _i1.Fake
    implements _i2.HttpClientResponse {}

class _FakeSocket extends _i1.Fake implements _i3.Socket {}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i2.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> getUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#getUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> postUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#postUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> putUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#putUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#deleteUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> patchUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#patchUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  _i4.Future<_i2.HttpClientRequest> headUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#headUrl, [url]),
              returnValue: Future.value(_FakeHttpClientRequest()))
          as _i4.Future<_i2.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i2.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i2.HttpClientRequest {
  MockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);
  @override
  set bufferOutput(bool? _bufferOutput) =>
      super.noSuchMethod(Invocation.setter(#bufferOutput, _bufferOutput),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  _i4.Future<_i2.HttpClientResponse> get done =>
      (super.noSuchMethod(Invocation.getter(#done),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i4.Future<_i2.HttpClientResponse> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i2.HttpClientResponse {
  MockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i2.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
              returnValue: _i2.HttpClientResponseCompressionState.notCompressed)
          as _i2.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i2.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i2.RedirectInfo>[]) as List<_i2.RedirectInfo>);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  _i4.Future<_i2.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i4.Future<_i3.Socket> detachSocket() =>
      (super.noSuchMethod(Invocation.method(#detachSocket, []),
          returnValue: Future.value(_FakeSocket())) as _i4.Future<_i3.Socket>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  MockHttpHeaders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get chunkedTransferEncoding =>
      (super.noSuchMethod(Invocation.getter(#chunkedTransferEncoding),
          returnValue: false) as bool);
  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
          Invocation.setter(#chunkedTransferEncoding, _chunkedTransferEncoding),
          returnValueForMissingStub: null);
  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(#[], [name])) as List<String>?);
  @override
  String? value(String? name) =>
      (super.noSuchMethod(Invocation.method(#value, [name])) as String?);
  @override
  void add(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #add, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void set(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #set, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void remove(String? name, Object? value) =>
      super.noSuchMethod(Invocation.method(#remove, [name, value]),
          returnValueForMissingStub: null);
  @override
  void removeAll(String? name) =>
      super.noSuchMethod(Invocation.method(#removeAll, [name]),
          returnValueForMissingStub: null);
  @override
  void forEach(void Function(String, List<String>)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  void noFolding(String? name) =>
      super.noSuchMethod(Invocation.method(#noFolding, [name]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockHttpClientRequest extends _i1.Mock
    implements _i2.HttpClientRequest {
  BaseMockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);
  @override
  set bufferOutput(bool? _bufferOutput) =>
      super.noSuchMethod(Invocation.setter(#bufferOutput, _bufferOutput),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  _i4.Future<_i2.HttpClientResponse> get done =>
      (super.noSuchMethod(Invocation.getter(#done),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i4.Future<_i2.HttpClientResponse> close() =>
      (super.noSuchMethod(Invocation.method(#close, []),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockHttpClientResponse extends _i1.Mock
    implements _i2.HttpClientResponse {
  BaseMockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i2.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
              returnValue: _i2.HttpClientResponseCompressionState.notCompressed)
          as _i2.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i2.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i2.RedirectInfo>[]) as List<_i2.RedirectInfo>);
  @override
  _i2.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i2.HttpHeaders);
  @override
  List<_i2.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i2.Cookie>[]) as List<_i2.Cookie>);
  @override
  _i4.Future<_i2.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future.value(_FakeHttpClientResponse()))
          as _i4.Future<_i2.HttpClientResponse>);
  @override
  _i4.Future<_i3.Socket> detachSocket() =>
      (super.noSuchMethod(Invocation.method(#detachSocket, []),
          returnValue: Future.value(_FakeSocket())) as _i4.Future<_i3.Socket>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class BaseMockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  BaseMockHttpHeaders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get chunkedTransferEncoding =>
      (super.noSuchMethod(Invocation.getter(#chunkedTransferEncoding),
          returnValue: false) as bool);
  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
          Invocation.setter(#chunkedTransferEncoding, _chunkedTransferEncoding),
          returnValueForMissingStub: null);
  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(#[], [name])) as List<String>?);
  @override
  String? value(String? name) =>
      (super.noSuchMethod(Invocation.method(#value, [name])) as String?);
  @override
  void add(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #add, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void set(String? name, Object? value, {bool? preserveHeaderCase = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #set, [name, value], {#preserveHeaderCase: preserveHeaderCase}),
          returnValueForMissingStub: null);
  @override
  void remove(String? name, Object? value) =>
      super.noSuchMethod(Invocation.method(#remove, [name, value]),
          returnValueForMissingStub: null);
  @override
  void removeAll(String? name) =>
      super.noSuchMethod(Invocation.method(#removeAll, [name]),
          returnValueForMissingStub: null);
  @override
  void forEach(void Function(String, List<String>)? action) =>
      super.noSuchMethod(Invocation.method(#forEach, [action]),
          returnValueForMissingStub: null);
  @override
  void noFolding(String? name) =>
      super.noSuchMethod(Invocation.method(#noFolding, [name]),
          returnValueForMissingStub: null);
}
