import 'package:json_annotation/json_annotation.dart';
import '../common/api_model.dart';
import 'query_result.dart';

part 'form_template.g.dart';

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class FormTemplateCollection implements IQueryResultEntityCollection {
  FormTemplateCollection();

  /// A necessary factory constructor for creating a new FormTemplateCollection instance
  /// from a map. Pass the map to the generated [_$FormTemplateCollectionFromJson()] constructor.
  /// The constructor is named after the source class, in this case, FormTemplateCollection.
  factory FormTemplateCollection.fromJson(Map<String, dynamic> json) =>
      _$FormTemplateCollectionFromJson(json);

  @JsonKey(name: 'FormTemplates')
  List<FormTemplate>? formTemplates;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FormTemplateCollectionToJson].
  Map<String, dynamic> toJson() => _$FormTemplateCollectionToJson(this);
  // coverage:ignore-end
}

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class FormTemplate extends Entity {
  FormTemplate();

  /// A necessary factory constructor for creating a new FormTemplate instance
  /// from a map. Pass the map to the generated [_$FormTemplateFromJson()] constructor.
  /// The constructor is named after the source class, in this case, FormTemplate.
  factory FormTemplate.fromJson(Map<String, dynamic> json) => _$FormTemplateFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'TenantID')
  String? tenantID;

  @JsonKey(name: 'UniqueID')
  String? uniqueID;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'Name')
  String? name;

  @JsonKey(name: 'NameLower')
  String? nameLower;

  @JsonKey(name: 'PageCount')
  int? pageCount;

  @JsonKey(name: 'IsPublic')
  bool? isPublic;

  @JsonKey(name: 'ClassificationID')
  String? classificationID;

  @JsonKey(name: 'ClassificationName')
  String? classificationName;

  @JsonKey(name: 'ClassificationNameLower')
  String? classificationNameLower;

  @JsonKey(name: 'Aspect')
  double? aspect;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FormTemplateToJson].
  @override
  Map<String, dynamic> toJson() => _$FormTemplateToJson(this);
  // coverage:ignore-end
}

// Originally generated by nucleus_one_utilities.
class FormTemplateFieldCollection extends EntityCollection<FormTemplateFieldItem> {
  FormTemplateFieldCollection() : super();

  factory FormTemplateFieldCollection.fromJson(List<dynamic> json) {
    return EntityCollection.fromJson(
        json, FormTemplateFieldCollection(), (x) => FormTemplateFieldItem.fromJson(x));
  }
}

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class FormTemplateFieldItem extends Entity {
  FormTemplateFieldItem();

  /// A necessary factory constructor for creating a new FormTemplateFieldItem instance
  /// from a map. Pass the map to the generated [_$FormTemplateFieldItemFromJson()] constructor.
  /// The constructor is named after the source class, in this case, FormTemplateFieldItem.
  factory FormTemplateFieldItem.fromJson(Map<String, dynamic> json) =>
      _$FormTemplateFieldItemFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'FormTemplateID')
  String? formTemplateID;

  @JsonKey(name: 'FormTemplateName')
  String? formTemplateName;

  @JsonKey(name: 'FormTemplateNameLower')
  String? formTemplateNameLower;

  @JsonKey(name: 'TenantID')
  String? tenantID;

  @JsonKey(name: 'UniqueID')
  String? uniqueID;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'Type')
  String? type;

  @JsonKey(name: 'FieldID')
  String? fieldID;

  @JsonKey(name: 'Field')
  FormTemplateField? field;

  @JsonKey(name: 'PageIndex')
  int? pageIndex;

  @JsonKey(name: 'X')
  double? x;

  @JsonKey(name: 'Y')
  double? y;

  @JsonKey(name: 'Width')
  double? width;

  @JsonKey(name: 'FontSize')
  int? fontSize;

  @JsonKey(name: 'UseColumnLayout')
  bool? useColumnLayout;

  @JsonKey(name: 'AssetBucketName')
  String? assetBucketName;

  @JsonKey(name: 'AssetObjectName')
  String? assetObjectName;

  @JsonKey(name: 'AssetContentType')
  String? assetContentType;

  @JsonKey(name: 'AssetSignedUrl')
  String? assetSignedUrl;

  @JsonKey(name: 'DefaultValue')
  String? defaultValue;

  @JsonKey(name: 'DefaultValues')
  String? defaultValues;

  @JsonKey(name: 'PossibleValues')
  dynamic? possibleValues;

  @JsonKey(name: 'Value')
  String? value;

  @JsonKey(name: 'Values')
  String? values;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FormTemplateFieldItemToJson].
  @override
  Map<String, dynamic> toJson() => _$FormTemplateFieldItemToJson(this);
  // coverage:ignore-end
}

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class FormTemplateField extends Entity {
  FormTemplateField();

  /// A necessary factory constructor for creating a new FormTemplateField instance
  /// from a map. Pass the map to the generated [_$FormTemplateFieldFromJson()] constructor.
  /// The constructor is named after the source class, in this case, FormTemplateField.
  factory FormTemplateField.fromJson(Map<String, dynamic> json) =>
      _$FormTemplateFieldFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'ParentFieldID')
  String? parentFieldID;

  @JsonKey(name: 'Name')
  String? name;

  @JsonKey(name: 'NameLower')
  String? nameLower;

  @JsonKey(name: 'Label')
  String? label;

  @JsonKey(name: 'LabelLower')
  String? labelLower;

  @JsonKey(name: 'LabelOrName')
  String? labelOrName;

  @JsonKey(name: 'LabelOrNameLower')
  String? labelOrNameLower;

  @JsonKey(name: 'Type')
  String? type;

  @JsonKey(name: 'DisplaySelectionList')
  bool? displaySelectionList;

  @JsonKey(name: 'AllowMultipleLines')
  bool? allowMultipleLines;

  @JsonKey(name: 'Rows')
  int? rows;

  @JsonKey(name: 'AllowMultipleValues')
  bool? allowMultipleValues;

  @JsonKey(name: 'AllowNewSelectionListItems')
  bool? allowNewSelectionListItems;

  @JsonKey(name: 'SaveNewSelectionListItems')
  bool? saveNewSelectionListItems;

  @JsonKey(name: 'DecimalPlaces')
  int? decimalPlaces;

  @JsonKey(name: 'Mask')
  String? mask;

  @JsonKey(name: 'Required')
  bool? required;

  @JsonKey(name: 'Sensitive')
  bool? sensitive;

  @JsonKey(name: 'UseCreationDate')
  bool? useCreationDate;

  @JsonKey(name: 'TextMatchType')
  String? textMatchType;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FormTemplateFieldToJson].
  @override
  Map<String, dynamic> toJson() => _$FormTemplateFieldToJson(this);
  // coverage:ignore-end
}
