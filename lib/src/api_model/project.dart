import 'package:json_annotation/json_annotation.dart';

part 'project.g.dart';

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class ProjectMember {
  ProjectMember();

  /// A necessary factory constructor for creating a new ProjectMember instance
  /// from a map. Pass the map to the generated [_$ProjectMemberFromJson()] constructor.
  /// The constructor is named after the source class, in this case, ProjectMember.
  factory ProjectMember.fromJson(Map<String, dynamic> json) => _$ProjectMemberFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'TenantID')
  String? tenantID;

  @JsonKey(name: 'TenantName')
  String? tenantName;

  @JsonKey(name: 'UserID')
  String? userID;

  @JsonKey(name: 'UserName')
  String? userName;

  @JsonKey(name: 'UserNameLower')
  String? userNameLower;

  @JsonKey(name: 'UserEmail')
  String? userEmail;

  @JsonKey(name: 'Disabled')
  bool? disabled;

  @JsonKey(name: 'IsReadOnly')
  bool? isReadOnly;

  @JsonKey(name: 'IsAdmin')
  bool? isAdmin;

  @JsonKey(name: 'IsOrganizationAdmin')
  bool? isOrganizationAdmin;

  @JsonKey(name: 'IsOrganizationOrTenantAdmin')
  bool? isOrganizationOrTenantAdmin;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$ProjectMemberToJson].
  Map<String, dynamic> toJson() => _$ProjectMemberToJson(this);
  // coverage:ignore-end
}

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class Project {
  Project();

  /// A necessary factory constructor for creating a new Project instance
  /// from a map. Pass the map to the generated [_$ProjectFromJson()] constructor.
  /// The constructor is named after the source class, in this case, Project.
  factory Project.fromJson(Map<String, dynamic> json) => _$ProjectFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'OrganizationID')
  String? organizationID;

  @JsonKey(name: 'OrganizationName')
  String? organizationName;

  @JsonKey(name: 'OrganizationNameLower')
  String? organizationNameLower;

  @JsonKey(name: 'OrganizationSubscriptionRequired')
  bool? organizationSubscriptionRequired;

  @JsonKey(name: 'OrganizationSubscriptionFreeUsers')
  int? organizationSubscriptionFreeUsers;

  @JsonKey(name: 'OrganizationSubscriptionExpiration')
  String? organizationSubscriptionExpiration;

  @JsonKey(name: 'BucketName')
  String? bucketName;

  @JsonKey(name: 'Name')
  String? name;

  @JsonKey(name: 'NameLower')
  String? nameLower;

  @JsonKey(name: 'CreatingUserID')
  String? creatingUserID;

  @JsonKey(name: 'CreatingUserName')
  String? creatingUserName;

  @JsonKey(name: 'CreatingUserEmail')
  String? creatingUserEmail;

  @JsonKey(name: 'CrmAccountId')
  String? crmAccountId;

  @JsonKey(name: 'Disabled')
  bool? disabled;

  @JsonKey(name: 'IsMarkedForPurge')
  bool? isMarkedForPurge;

  @JsonKey(name: 'PurgeMarkedOn')
  String? purgeMarkedOn;

  @JsonKey(name: 'PurgeMarkedByUserID')
  String? purgeMarkedByUserID;

  @JsonKey(name: 'PurgeMarkedByUserName')
  String? purgeMarkedByUserName;

  @JsonKey(name: 'PurgeMarkedByUserEmail')
  String? purgeMarkedByUserEmail;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$ProjectToJson].
  Map<String, dynamic> toJson() => _$ProjectToJson(this);
  // coverage:ignore-end
}
