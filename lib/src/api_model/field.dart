import 'package:json_annotation/json_annotation.dart';
import '../common/api_model.dart';
import 'query_result.dart';

part 'field.g.dart';

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class FieldCollection implements IQueryResultEntityCollection {
  FieldCollection();

  /// A necessary factory constructor for creating a new FieldCollection instance
  /// from a map. Pass the map to the generated [_$FieldCollectionFromJson()] constructor.
  /// The constructor is named after the source class, in this case, FieldCollection.
  factory FieldCollection.fromJson(Map<String, dynamic> json) => _$FieldCollectionFromJson(json);

  @JsonKey(name: 'Fields')
  List<Field>? fields;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FieldCollectionToJson].
  Map<String, dynamic> toJson() => _$FieldCollectionToJson(this);
  // coverage:ignore-end
}

// Originally generated by nucleus_one_utilities.
// Serializable members must be explicitly marked with [JsonKey].
@JsonSerializable(ignoreUnannotated: true, includeIfNull: false)
class Field extends Entity {
  Field();

  /// A necessary factory constructor for creating a new Field instance
  /// from a map. Pass the map to the generated [_$FieldFromJson()] constructor.
  /// The constructor is named after the source class, in this case, Field.
  factory Field.fromJson(Map<String, dynamic> json) => _$FieldFromJson(json);

  @JsonKey(name: 'ID')
  String? id;

  @JsonKey(name: 'CreatedOn')
  String? createdOn;

  @JsonKey(name: 'ParentFieldID')
  String? parentFieldID;

  @JsonKey(name: 'Name')
  String? name;

  @JsonKey(name: 'NameLower')
  String? nameLower;

  @JsonKey(name: 'Label')
  String? label;

  @JsonKey(name: 'LabelLower')
  String? labelLower;

  @JsonKey(name: 'LabelOrName')
  String? labelOrName;

  @JsonKey(name: 'LabelOrNameLower')
  String? labelOrNameLower;

  @JsonKey(name: 'Type')
  String? type;

  @JsonKey(name: 'DisplaySelectionList')
  bool? displaySelectionList;

  @JsonKey(name: 'AllowMultipleLines')
  bool? allowMultipleLines;

  @JsonKey(name: 'Rows')
  int? rows;

  @JsonKey(name: 'AllowMultipleValues')
  bool? allowMultipleValues;

  @JsonKey(name: 'AllowNewSelectionListItems')
  bool? allowNewSelectionListItems;

  @JsonKey(name: 'SaveNewSelectionListItems')
  bool? saveNewSelectionListItems;

  @JsonKey(name: 'DecimalPlaces')
  int? decimalPlaces;

  @JsonKey(name: 'Mask')
  String? mask;

  @JsonKey(name: 'Required')
  bool? required;

  @JsonKey(name: 'Sensitive')
  bool? sensitive;

  @JsonKey(name: 'UseCreationDate')
  bool? useCreationDate;

  @JsonKey(name: 'TextMatchType')
  String? textMatchType;

  // coverage:ignore-start
  /// [toJson] is the convention for a class to declare support for serialization
  /// to JSON. The implementation simply calls the private, generated
  /// helper method [_$FieldToJson].
  @override
  Map<String, dynamic> toJson() => _$FieldToJson(this);
  // coverage:ignore-end
}
