import '../api_model/organization_for_client.dart' as api_mod;
import '../common/get_it.dart';
import '../common/model.dart';
import '../nucleus_one.dart';

// Originally generated by nucleus_one_utilities.
mixin OrganizationForClientMixin {
  late final String id;
  late final String createdOn;
  late final String name;
  late final String creatingUserID;
  late final String creatingUserName;
  late final String creatingUserEmail;
  late final String crmAccountId;
  late final bool subscriptionRequired;
  late final int subscriptionFreeUsers;
  late final String subscriptionExpiration;
  late final String searchIndexID;
  late final String bucketName;
  late final bool disabled;
  late final bool isMarkedForPurge;
  late final String purgeDate;
  late final int uniqueNonReadOnlyOrganizationMembers;
  late final int uniqueReadOnlyOrganizationMembers;
  late final int uniqueFreeOrganizationMembers;
  late final int uniqueBillableOrganizationMembers;
}

// Originally generated by nucleus_one_utilities.
class OrganizationForClient with NucleusOneAppDependent, OrganizationForClientMixin {
  OrganizationForClient._({
    NucleusOneApp? app,
    required String id,
    required String createdOn,
    required String name,
    required String creatingUserID,
    required String creatingUserName,
    required String creatingUserEmail,
    required String crmAccountId,
    required bool subscriptionRequired,
    required int subscriptionFreeUsers,
    required String subscriptionExpiration,
    required String searchIndexID,
    required String bucketName,
    required bool disabled,
    required bool isMarkedForPurge,
    required String purgeDate,
    required int uniqueNonReadOnlyOrganizationMembers,
    required int uniqueReadOnlyOrganizationMembers,
    required int uniqueFreeOrganizationMembers,
    required int uniqueBillableOrganizationMembers,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
    this.id = id;
    this.createdOn = createdOn;
    this.name = name;
    this.creatingUserID = creatingUserID;
    this.creatingUserName = creatingUserName;
    this.creatingUserEmail = creatingUserEmail;
    this.crmAccountId = crmAccountId;
    this.subscriptionRequired = subscriptionRequired;
    this.subscriptionFreeUsers = subscriptionFreeUsers;
    this.subscriptionExpiration = subscriptionExpiration;
    this.searchIndexID = searchIndexID;
    this.bucketName = bucketName;
    this.disabled = disabled;
    this.isMarkedForPurge = isMarkedForPurge;
    this.purgeDate = purgeDate;
    this.uniqueNonReadOnlyOrganizationMembers = uniqueNonReadOnlyOrganizationMembers;
    this.uniqueReadOnlyOrganizationMembers = uniqueReadOnlyOrganizationMembers;
    this.uniqueFreeOrganizationMembers = uniqueFreeOrganizationMembers;
    this.uniqueBillableOrganizationMembers = uniqueBillableOrganizationMembers;
  }

  factory OrganizationForClient.fromApiModel(
    api_mod.OrganizationForClient apiModel, {
    NucleusOneApp? app,
  }) {
    return OrganizationForClient._(
      app: app,
      id: apiModel.id!,
      createdOn: apiModel.createdOn!,
      name: apiModel.name!,
      creatingUserID: apiModel.creatingUserID!,
      creatingUserName: apiModel.creatingUserName!,
      creatingUserEmail: apiModel.creatingUserEmail!,
      crmAccountId: apiModel.crmAccountId!,
      subscriptionRequired: apiModel.subscriptionRequired!,
      subscriptionFreeUsers: apiModel.subscriptionFreeUsers!,
      subscriptionExpiration: apiModel.subscriptionExpiration!,
      searchIndexID: apiModel.searchIndexID!,
      bucketName: apiModel.bucketName!,
      disabled: apiModel.disabled!,
      isMarkedForPurge: apiModel.isMarkedForPurge!,
      purgeDate: apiModel.purgeDate!,
      uniqueNonReadOnlyOrganizationMembers: apiModel.uniqueNonReadOnlyOrganizationMembers!,
      uniqueReadOnlyOrganizationMembers: apiModel.uniqueReadOnlyOrganizationMembers!,
      uniqueFreeOrganizationMembers: apiModel.uniqueFreeOrganizationMembers!,
      uniqueBillableOrganizationMembers: apiModel.uniqueBillableOrganizationMembers!,
    );
  }

  api_mod.OrganizationForClient toApiModel() {
    return api_mod.OrganizationForClient()
      ..id = id
      ..createdOn = createdOn
      ..name = name
      ..creatingUserID = creatingUserID
      ..creatingUserName = creatingUserName
      ..creatingUserEmail = creatingUserEmail
      ..crmAccountId = crmAccountId
      ..subscriptionRequired = subscriptionRequired
      ..subscriptionFreeUsers = subscriptionFreeUsers
      ..subscriptionExpiration = subscriptionExpiration
      ..searchIndexID = searchIndexID
      ..bucketName = bucketName
      ..disabled = disabled
      ..isMarkedForPurge = isMarkedForPurge
      ..purgeDate = purgeDate
      ..uniqueNonReadOnlyOrganizationMembers = uniqueNonReadOnlyOrganizationMembers
      ..uniqueReadOnlyOrganizationMembers = uniqueReadOnlyOrganizationMembers
      ..uniqueFreeOrganizationMembers = uniqueFreeOrganizationMembers
      ..uniqueBillableOrganizationMembers = uniqueBillableOrganizationMembers;
  }
}

class OrganizationForClientCollection
    extends EntityCollection<OrganizationForClient, api_mod.OrganizationForClientCollection> {
  OrganizationForClientCollection({
    NucleusOneApp? app,
    List<OrganizationForClient>? items,
  }) : super(app: app, items: items);

  factory OrganizationForClientCollection.fromApiModel(
    api_mod.OrganizationForClientCollection apiModel, {
    NucleusOneApp? app,
  }) {
    return OrganizationForClientCollection(
        items: apiModel.organizations?.map((x) => OrganizationForClient.fromApiModel(x)).toList());
  }

  @override
  api_mod.OrganizationForClientCollection toApiModel() {
    return api_mod.OrganizationForClientCollection()
      ..organizations = items.map((x) => x.toApiModel()).toList();
  }
}
