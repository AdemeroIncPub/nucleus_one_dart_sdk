import '../api_model/organization_for_client.dart' as api_mod;
import '../common/get_it.dart';
import '../common/model.dart';
import '../nucleus_one.dart';

// Originally generated by nucleus_one_utilities.
mixin OrganizationForClientMixin {
  late final String id;
  late final String createdOn;
  late final String name;
  late final String creatingUserID;
  late final String creatingUserName;
  late final String creatingUserEmail;
  late final String crmAccountId;
  late final bool subscriptionRequired;
  late final int subscriptionFreeUsers;
  late final String subscriptionExpiration;
  late final String searchIndexID;
  late final String bucketName;
  late final bool disabled;
  late final bool isMarkedForPurge;
  late final String purgeDate;
  late final int uniqueNonReadOnlyOrganizationMembers;
  late final int uniqueReadOnlyOrganizationMembers;
  late final int uniqueFreeOrganizationMembers;
  late final int uniqueBillableOrganizationMembers;
}

// Originally generated by nucleus_one_utilities.
class OrganizationForClient extends Entity with NucleusOneAppDependent {
  OrganizationForClient._({
    NucleusOneApp? app,
    required this.id,
    required this.createdOn,
    required this.name,
    required this.createdByUserID,
    required this.createdByUserName,
    required this.createdByUserEmail,
    required this.subscriptionRequired,
    required this.subscriptionFreeUsers,
    required this.subscriptionExpiration,
    required this.uniqueNonReadOnlyOrganizationMembers,
    required this.uniqueReadOnlyOrganizationMembers,
    required this.uniqueFreeOrganizationMembers,
    required this.uniqueBillableOrganizationMembers,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory OrganizationForClient.fromApiModel(
    api_mod.OrganizationForClient apiModel, {
    NucleusOneApp? app,
  }) {
    return OrganizationForClient._(
      app: app,
      id: apiModel.id!,
      createdOn: apiModel.createdOn!,
      name: apiModel.name!,
      createdByUserID: apiModel.createdByUserID!,
      createdByUserName: apiModel.createdByUserName!,
      createdByUserEmail: apiModel.createdByUserEmail!,
      subscriptionRequired: apiModel.subscriptionRequired!,
      subscriptionFreeUsers: apiModel.subscriptionFreeUsers!,
      subscriptionExpiration: apiModel.subscriptionExpiration!,
      uniqueNonReadOnlyOrganizationMembers: apiModel.uniqueNonReadOnlyOrganizationMembers!,
      uniqueReadOnlyOrganizationMembers: apiModel.uniqueReadOnlyOrganizationMembers!,
      uniqueFreeOrganizationMembers: apiModel.uniqueFreeOrganizationMembers!,
      uniqueBillableOrganizationMembers: apiModel.uniqueBillableOrganizationMembers!,
    );
  }

  String id;

  String createdOn;

  String name;

  String createdByUserID;

  String createdByUserName;

  String createdByUserEmail;

  bool subscriptionRequired;

  int subscriptionFreeUsers;

  String subscriptionExpiration;

  int uniqueNonReadOnlyOrganizationMembers;

  int uniqueReadOnlyOrganizationMembers;

  int uniqueFreeOrganizationMembers;

  int uniqueBillableOrganizationMembers;

  @override
  api_mod.OrganizationForClient toApiModel() {
    return api_mod.OrganizationForClient()
      ..id = id
      ..createdOn = createdOn
      ..name = name
      ..createdByUserID = createdByUserID
      ..createdByUserName = createdByUserName
      ..createdByUserEmail = createdByUserEmail
      ..subscriptionRequired = subscriptionRequired
      ..subscriptionFreeUsers = subscriptionFreeUsers
      ..subscriptionExpiration = subscriptionExpiration
      ..uniqueNonReadOnlyOrganizationMembers = uniqueNonReadOnlyOrganizationMembers
      ..uniqueReadOnlyOrganizationMembers = uniqueReadOnlyOrganizationMembers
      ..uniqueFreeOrganizationMembers = uniqueFreeOrganizationMembers
      ..uniqueBillableOrganizationMembers = uniqueBillableOrganizationMembers;
  }
}

class OrganizationForClientCollection
    extends EntityCollection<OrganizationForClient, api_mod.OrganizationForClientCollection> {
  OrganizationForClientCollection({
    NucleusOneApp? app,
    List<OrganizationForClient>? items,
  }) : super(app: app, items: items);

  factory OrganizationForClientCollection.fromApiModel(
    api_mod.OrganizationForClientCollection apiModel, {
    NucleusOneApp? app,
  }) {
    return OrganizationForClientCollection(
        items: apiModel.organizations?.map((x) => OrganizationForClient.fromApiModel(x)).toList());
  }

  @override
  api_mod.OrganizationForClientCollection toApiModel() {
    return api_mod.OrganizationForClientCollection()
      ..organizations = items.map((x) => x.toApiModel()).toList();
  }
}
