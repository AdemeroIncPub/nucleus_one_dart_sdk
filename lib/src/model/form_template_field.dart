import 'package:meta/meta.dart';

import '../api_model/form_template_field.dart' as api_mod;
import '../common/get_it.dart';
import '../common/model.dart';
import '../nucleus_one.dart';
import 'field.dart';

// Originally generated by nucleus_one_utilities.
mixin FormTemplateFieldMixin {
  late NucleusOneApp app;
  late String id;
  late String formTemplateID;
  late String formTemplateName;
  late String formTemplateNameLower;
  late String tenantID;
  late String uniqueID;
  late String createdOn;
  late String type;
  late String fieldID;
  late Field field;
  late int pageIndex;
  late double x;
  late double y;
  late double width;
  late int fontSize;
  late bool useColumnLayout;
  late String assetBucketName;
  late String assetObjectName;
  late String assetContentType;
  late String assetSignedUrl;
  late String defaultValue;
  late String defaultValues;
  late List<String> possibleValues;
  late String value;
  late String values;

  static void fromApiModel(
    FormTemplateFieldMixin model,
    api_mod.FormTemplateFieldMixin apiModel, {
    NucleusOneApp? app,
  }) {
    model
      ..app = app ?? getIt.get<NucleusOneApp>()
      ..id = apiModel.id!
      ..formTemplateID = apiModel.formTemplateID!
      ..formTemplateName = apiModel.formTemplateName!
      ..formTemplateNameLower = apiModel.formTemplateNameLower!
      ..tenantID = apiModel.tenantID!
      ..uniqueID = apiModel.uniqueID!
      ..createdOn = apiModel.createdOn!
      ..type = apiModel.type!
      ..fieldID = apiModel.fieldID!
      ..field = Field.fromApiModel(apiModel.field!, app: app)
      ..pageIndex = apiModel.pageIndex!
      ..x = apiModel.x!
      ..y = apiModel.y!
      ..width = apiModel.width!
      ..fontSize = apiModel.fontSize!
      ..useColumnLayout = apiModel.useColumnLayout!
      ..assetBucketName = apiModel.assetBucketName!
      ..assetObjectName = apiModel.assetObjectName!
      ..assetContentType = apiModel.assetContentType!
      ..assetSignedUrl = apiModel.assetSignedUrl!
      ..defaultValue = apiModel.defaultValue!
      ..defaultValues = apiModel.defaultValues!
      ..possibleValues = apiModel.possibleValues!.toList()
      ..value = apiModel.value!
      ..values = apiModel.values!;
  }

  @protected
  void formTemplateFieldMixinToApiModel(api_mod.FormTemplateFieldMixin apiModel) {
    apiModel
      ..id = id
      ..formTemplateID = formTemplateID
      ..formTemplateName = formTemplateName
      ..formTemplateNameLower = formTemplateNameLower
      ..tenantID = tenantID
      ..uniqueID = uniqueID
      ..createdOn = createdOn
      ..type = type
      ..fieldID = fieldID
      ..field = field.toApiModel()
      ..pageIndex = pageIndex
      ..x = x
      ..y = y
      ..width = width
      ..fontSize = fontSize
      ..useColumnLayout = useColumnLayout
      ..assetBucketName = assetBucketName
      ..assetObjectName = assetObjectName
      ..assetContentType = assetContentType
      ..assetSignedUrl = assetSignedUrl
      ..defaultValue = defaultValue
      ..defaultValues = defaultValues
      ..possibleValues = possibleValues.toList()
      ..value = value
      ..values = values;
  }
}

// Originally generated by nucleus_one_utilities.
class FormTemplateField extends Entity with NucleusOneAppDependent, FormTemplateFieldMixin {
  FormTemplateField._({
    NucleusOneApp? app,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormTemplateField.fromApiModel(
    api_mod.FormTemplateField apiModel, {
    NucleusOneApp? app,
  }) {
    final model = FormTemplateField._(app: app);
    FormTemplateFieldMixin.fromApiModel(
      model,
      apiModel,
      app: app,
    );
    return model;
  }

  @override
  api_mod.FormTemplateField toApiModel() {
    final apiModel = api_mod.FormTemplateField();
    super.formTemplateFieldMixinToApiModel(apiModel);
    return apiModel;
  }
}

class FormTemplateFieldCollection
    extends EntityCollection<FormTemplateField, api_mod.FormTemplateFieldCollection> {
  FormTemplateFieldCollection({
    NucleusOneApp? app,
    List<FormTemplateField>? items,
  }) : super(app: app, items: items);

  factory FormTemplateFieldCollection.fromApiModel(
    api_mod.FormTemplateFieldCollection apiModel, {
    NucleusOneApp? app,
  }) {
    return FormTemplateFieldCollection(
        items: apiModel.items.map((x) => FormTemplateField.fromApiModel(x)).toList());
  }

  @override
  api_mod.FormTemplateFieldCollection toApiModel() {
    return api_mod.FormTemplateFieldCollection()..items = items.map((x) => x.toApiModel()).toList();
  }
}
