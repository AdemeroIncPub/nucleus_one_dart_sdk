import 'package:get_it/get_it.dart';
import 'package:meta/meta.dart';

import '../api_model/classification.dart' as api_mod;
import '../common/model.dart';
import '../nucleus_one.dart';

class ClassificationCollection
    extends EntityCollection<Classification, api_mod.ClassificationCollection> {
  ClassificationCollection({
    NucleusOneAppInternal? app,
    List<Classification>? items,
  }) : super(app: app, items: items);

  factory ClassificationCollection.fromApiModel(api_mod.ClassificationCollection apiModel) {
    return ClassificationCollection(
        items: apiModel.classifications?.map((x) => Classification.fromApiModel(x)).toList());
  }

  @override
  api_mod.ClassificationCollection toApiModel() {
    return api_mod.ClassificationCollection()
      ..classifications = items.map((x) => x.toApiModel()).toList();
  }
}

class Classification with NucleusOneAppDependent {
  Classification._(
      {NucleusOneAppInternal? app,
      required this.id,
      required this.createdOn,
      required this.name,
      required this.nameLower,
      required this.isActive}) {
    this.app = app ?? GetIt.instance.get<NucleusOneApp>() as NucleusOneAppInternal;
  }

  factory Classification.fromApiModel(api_mod.Classification apiModel) {
    return Classification._(
        id: apiModel.id!,
        createdOn: apiModel.createdOn!,
        name: apiModel.name!,
        nameLower: apiModel.nameLower!,
        isActive: apiModel.isActive!);
  }

  String id;

  String createdOn;

  String name;

  String nameLower;

  bool isActive;

  api_mod.Classification toApiModel() {
    return api_mod.Classification()
      ..id = id
      ..createdOn = createdOn
      ..name = name
      ..nameLower = nameLower
      ..isActive = isActive;
  }
}

@immutable
class FieldFilter {
  final String id;
  final String value;
  final String type;
  final String valueType;

  FieldFilter(this.id, this.value, this.type, this.valueType);

  Map<String, String> toQueryStringParams(int itemIndex) {
    final idLocal = Uri.encodeComponent(id);
    final valueLocal = Uri.encodeComponent(value);
    final typeLocal = Uri.encodeComponent(type);
    final valueTypeLocal = Uri.encodeComponent(valueType);
    return {
      'fieldID$itemIndex': idLocal,
      'fieldValue$itemIndex': valueLocal,
      'fieldType$itemIndex': typeLocal,
      'fieldValueType$itemIndex': valueTypeLocal,
    };
  }
}

class ClassificationFieldCollection
    extends EntityCollection<ClassificationField, api_mod.ClassificationFieldCollection> {
  ClassificationFieldCollection({
    NucleusOneAppInternal? app,
    List<ClassificationField>? items,
  }) : super(app: app, items: items);

  factory ClassificationFieldCollection.fromApiModel(
      api_mod.ClassificationFieldCollection apiModel) {
    return ClassificationFieldCollection(
        items: apiModel.items.map((x) => ClassificationField.fromApiModel(x)).toList());
  }

  @override
  api_mod.ClassificationFieldCollection toApiModel() {
    return api_mod.ClassificationFieldCollection()
      ..items = items.map((x) => x.toApiModel()).toList();
  }
}

// Originally generated by nucleus_one_utilities.
class ClassificationField with NucleusOneAppDependent {
  ClassificationField._({
    NucleusOneAppInternal? app,
    required this.id,
    required this.classificationID,
    required this.classificationName,
    required this.fieldID,
    required this.fieldName,
    required this.fieldNameLower,
    required this.rank,
    required this.mapped,
  }) {
    this.app = app ?? GetIt.instance.get<NucleusOneApp>() as NucleusOneAppInternal;
  }

  factory ClassificationField.fromApiModel(api_mod.ClassificationField apiModel) {
    return ClassificationField._(
      id: apiModel.id!,
      classificationID: apiModel.classificationID!,
      classificationName: apiModel.classificationName!,
      fieldID: apiModel.fieldID!,
      fieldName: apiModel.fieldName!,
      fieldNameLower: apiModel.fieldNameLower!,
      rank: apiModel.rank!,
      mapped: apiModel.mapped!,
    );
  }

  String id;

  String classificationID;

  String classificationName;

  String fieldID;

  String fieldName;

  String fieldNameLower;

  double rank;

  bool mapped;

  api_mod.ClassificationField toApiModel() {
    return api_mod.ClassificationField()
      ..id = id
      ..classificationID = classificationID
      ..classificationName = classificationName
      ..fieldID = fieldID
      ..fieldName = fieldName
      ..fieldNameLower = fieldNameLower
      ..rank = rank
      ..mapped = mapped;
  }
}
