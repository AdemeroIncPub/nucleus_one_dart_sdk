import '../api_model/form_submission_package.dart' as api_mod;
import '../common/get_it.dart';
import '../common/model.dart';
import '../nucleus_one.dart';
import 'form_submission_field.dart';

// Originally generated by nucleus_one_utilities.
class FormSubmissionPackage extends Entity with NucleusOneAppDependent {
  FormSubmissionPackage._({
    NucleusOneApp? app,
    required this.tenantID,
    required this.formTemplateID,
    required this.formSubmissionFields,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormSubmissionPackage.createNew({
    required String tenantID,
    required String formTemplateID,
    required List<FormSubmissionField> formSubmissionFields,
    NucleusOneApp? app,
  }) {
    if (tenantID.isEmpty) {
      throw ArgumentError.value(tenantID, 'tenantID', 'Cannot be blank.');
    }
    if (formTemplateID.isEmpty) {
      throw ArgumentError.value(formTemplateID, 'formTemplateID', 'Cannot be blank.');
    }

    return FormSubmissionPackage._(
      app: app,
      tenantID: tenantID,
      formTemplateID: formTemplateID,
      formSubmissionFields: formSubmissionFields,
    );
  }

  factory FormSubmissionPackage.fromApiModel(
    api_mod.FormSubmissionPackage apiModel, {
    NucleusOneApp? app,
  }) {
    return FormSubmissionPackage._(
      app: app,
      tenantID: apiModel.tenantID!,
      formTemplateID: apiModel.formTemplateID!,
      formSubmissionFields:
          apiModel.formSubmissionFields!.map((x) => FormSubmissionField.fromApiModel(x)).toList(),
    );
  }

  String tenantID;

  String formTemplateID;

  List<FormSubmissionField> formSubmissionFields;

  @override
  api_mod.FormSubmissionPackage toApiModel() {
    return api_mod.FormSubmissionPackage()
      ..tenantID = tenantID
      ..formTemplateID = formTemplateID
      ..formSubmissionFields = formSubmissionFields.map((x) => x.toApiModel()).toList();
  }
}

class FormSubmissionPackageCollection
    extends EntityCollection<FormSubmissionPackage, api_mod.FormSubmissionPackageCollection> {
  FormSubmissionPackageCollection({
    NucleusOneApp? app,
    List<FormSubmissionPackage>? items,
  }) : super(app: app, items: items);

  factory FormSubmissionPackageCollection.fromApiModel(
      api_mod.FormSubmissionPackageCollection apiModel) {
    return FormSubmissionPackageCollection(
        items: apiModel.items.map((x) => FormSubmissionPackage.fromApiModel(x)).toList());
  }

  @override
  api_mod.FormSubmissionPackageCollection toApiModel() {
    return api_mod.FormSubmissionPackageCollection()
      ..items = items.map((x) => x.toApiModel()).toList();
  }
}
