import '../api_model/form_template.dart' as api_mod;
import '../api_model/form_template_field.dart' as api_mod;
import '../common/get_it.dart';
import '../common/model.dart';
import '../hierarchy/nucleus_one_app_project.dart';
import '../nucleus_one.dart';
import 'field.dart';

class FormTemplateCollection extends EntityCollection<FormTemplate, api_mod.FormTemplateCollection>
    with NucleusOneAppProjectDependent {
  FormTemplateCollection({
    NucleusOneAppProject? project,
    List<FormTemplate>? items,
  }) : super(app: project?.app, items: items) {
    this.project = project ?? getIt.get<NucleusOneAppProject>();
  }

  factory FormTemplateCollection.fromApiModel(
    api_mod.FormTemplateCollection apiModel, {
    NucleusOneAppProject? project,
  }) {
    return FormTemplateCollection(
        project: project,
        items: apiModel.formTemplates?.map((x) => FormTemplate.fromApiModel(x)).toList());
  }

  @override
  api_mod.FormTemplateCollection toApiModel() {
    return api_mod.FormTemplateCollection()
      ..formTemplates = items.map((x) => x.toApiModel()).toList();
  }
}

class FormTemplate extends Entity with NucleusOneAppDependent {
  FormTemplate._({
    NucleusOneApp? app,
    required this.id,
    required this.tenantID,
    required this.uniqueID,
    required this.createdOn,
    required this.name,
    required this.nameLower,
    required this.pageCount,
    required this.isPublic,
    required this.classificationID,
    required this.classificationName,
    required this.classificationNameLower,
    required this.aspect,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormTemplate.fromApiModel(
    api_mod.FormTemplate apiModel, {
    NucleusOneApp? app,
  }) {
    return FormTemplate._(
      app: app,
      id: apiModel.id!,
      tenantID: apiModel.tenantID!,
      uniqueID: apiModel.uniqueID!,
      createdOn: apiModel.createdOn!,
      name: apiModel.name!,
      nameLower: apiModel.nameLower!,
      pageCount: apiModel.pageCount!,
      isPublic: apiModel.isPublic!,
      classificationID: apiModel.classificationID!,
      classificationName: apiModel.classificationName!,
      classificationNameLower: apiModel.classificationNameLower!,
      aspect: apiModel.aspect!,
    );
  }

  String id;

  String tenantID;

  String uniqueID;

  String createdOn;

  String name;

  String nameLower;

  int pageCount;

  bool isPublic;

  String classificationID;

  String classificationName;

  String classificationNameLower;

  double aspect;

  @override
  api_mod.FormTemplate toApiModel() {
    return api_mod.FormTemplate()
      ..id = id
      ..tenantID = tenantID
      ..uniqueID = uniqueID
      ..createdOn = createdOn
      ..name = name
      ..nameLower = nameLower
      ..pageCount = pageCount
      ..isPublic = isPublic
      ..classificationID = classificationID
      ..classificationName = classificationName
      ..classificationNameLower = classificationNameLower
      ..aspect = aspect;
  }
}

class FormTemplateFieldCollection
    extends EntityCollection<FormTemplateField, api_mod.FormTemplateFieldCollection> {
  FormTemplateFieldCollection({
    NucleusOneApp? app,
    List<FormTemplateField>? items,
  }) : super(app: app, items: items);

  factory FormTemplateFieldCollection.fromApiModel(
    api_mod.FormTemplateFieldCollection apiModel, {
    NucleusOneApp? app,
  }) {
    return FormTemplateFieldCollection(
        items: apiModel.items.map((x) => FormTemplateField.fromApiModel(x)).toList());
  }

  @override
  api_mod.FormTemplateFieldCollection toApiModel() {
    return api_mod.FormTemplateFieldCollection()..items = items.map((x) => x.toApiModel()).toList();
  }
}

// Originally generated by nucleus_one_utilities.
mixin FormTemplateFieldMixin {
  late NucleusOneApp app;
  late String id;
  late String formTemplateID;
  late String formTemplateName;
  late String formTemplateNameLower;
  late String tenantID;
  late String uniqueID;
  late String createdOn;
  late String type;
  late String fieldID;
  late Field field;
  late int pageIndex;
  late double x;
  late double y;
  late double width;
  late int fontSize;
  late bool useColumnLayout;
  late String assetBucketName;
  late String assetObjectName;
  late String assetContentType;
  late String assetSignedUrl;
  late String defaultValue;
  late String defaultValues;
  late List<String> possibleValues;
  late String value;
  late String values;

  static void fromApiModel(
    FormTemplateFieldMixin model,
    api_mod.FormTemplateFieldMixin apiModel, {
    NucleusOneApp? app,
  }) {
    model
      ..app = app ?? getIt.get<NucleusOneApp>()
      ..id = apiModel.id!
      ..formTemplateID = apiModel.formTemplateID!
      ..formTemplateName = apiModel.formTemplateName!
      ..formTemplateNameLower = apiModel.formTemplateNameLower!
      ..tenantID = apiModel.tenantID!
      ..uniqueID = apiModel.uniqueID!
      ..createdOn = apiModel.createdOn!
      ..type = apiModel.type!
      ..fieldID = apiModel.fieldID!
      ..field = Field.fromApiModel(apiModel.field!, app: app)
      ..pageIndex = apiModel.pageIndex!
      ..x = apiModel.x!
      ..y = apiModel.y!
      ..width = apiModel.width!
      ..fontSize = apiModel.fontSize!
      ..useColumnLayout = apiModel.useColumnLayout!
      ..assetBucketName = apiModel.assetBucketName!
      ..assetObjectName = apiModel.assetObjectName!
      ..assetContentType = apiModel.assetContentType!
      ..assetSignedUrl = apiModel.assetSignedUrl!
      ..defaultValue = apiModel.defaultValue!
      ..defaultValues = apiModel.defaultValues!
      ..possibleValues = apiModel.possibleValues!.toList()
      ..value = apiModel.value!
      ..values = apiModel.values!;
  }

  void _formTemplateFieldMixinToApiModel(api_mod.FormTemplateFieldMixin apiModel) {
    apiModel
      ..id = id
      ..formTemplateID = formTemplateID
      ..formTemplateName = formTemplateName
      ..formTemplateNameLower = formTemplateNameLower
      ..tenantID = tenantID
      ..uniqueID = uniqueID
      ..createdOn = createdOn
      ..type = type
      ..fieldID = fieldID
      ..field = field.toApiModel()
      ..pageIndex = pageIndex
      ..x = x
      ..y = y
      ..width = width
      ..fontSize = fontSize
      ..useColumnLayout = useColumnLayout
      ..assetBucketName = assetBucketName
      ..assetObjectName = assetObjectName
      ..assetContentType = assetContentType
      ..assetSignedUrl = assetSignedUrl
      ..defaultValue = defaultValue
      ..defaultValues = defaultValues
      ..possibleValues = possibleValues.toList()
      ..value = value
      ..values = values;
  }
}

// Originally generated by nucleus_one_utilities.
class FormTemplateField extends Entity with NucleusOneAppDependent, FormTemplateFieldMixin {
  FormTemplateField._({
    NucleusOneApp? app,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormTemplateField.fromApiModel(
    api_mod.FormTemplateField apiModel, {
    NucleusOneApp? app,
  }) {
    final model = FormTemplateField._(app: app);
    FormTemplateFieldMixin.fromApiModel(
      model,
      apiModel,
      app: app,
    );
    return model;
  }

  @override
  api_mod.FormTemplateField toApiModel() {
    final apiModel = api_mod.FormTemplateField();
    _formTemplateFieldMixinToApiModel(apiModel);
    return apiModel;
  }
}

class FormSubmissionPackageCollection
    extends EntityCollection<FormSubmissionPackage, api_mod.FormSubmissionPackageCollection> {
  FormSubmissionPackageCollection({
    NucleusOneApp? app,
    List<FormSubmissionPackage>? items,
  }) : super(app: app, items: items);

  factory FormSubmissionPackageCollection.fromApiModel(
      api_mod.FormSubmissionPackageCollection apiModel) {
    return FormSubmissionPackageCollection(
        items: apiModel.items.map((x) => FormSubmissionPackage.fromApiModel(x)).toList());
  }

  @override
  api_mod.FormSubmissionPackageCollection toApiModel() {
    return api_mod.FormSubmissionPackageCollection()
      ..items = items.map((x) => x.toApiModel()).toList();
  }
}

// Originally generated by nucleus_one_utilities.
class FormSubmissionPackage extends Entity with NucleusOneAppDependent {
  FormSubmissionPackage._({
    NucleusOneApp? app,
    required this.tenantID,
    required this.formTemplateID,
    required this.formSubmissionFields,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormSubmissionPackage.createNew({
    required String tenantID,
    required String formTemplateID,
    required List<FormSubmissionField> formSubmissionFields,
    NucleusOneApp? app,
  }) {
    if (tenantID.isEmpty) {
      throw ArgumentError.value(tenantID, 'tenantID', 'Cannot be blank.');
    }
    if (formTemplateID.isEmpty) {
      throw ArgumentError.value(formTemplateID, 'formTemplateID', 'Cannot be blank.');
    }

    return FormSubmissionPackage._(
      app: app,
      tenantID: tenantID,
      formTemplateID: formTemplateID,
      formSubmissionFields: formSubmissionFields,
    );
  }

  factory FormSubmissionPackage.fromApiModel(
    api_mod.FormSubmissionPackage apiModel, {
    NucleusOneApp? app,
  }) {
    return FormSubmissionPackage._(
      app: app,
      tenantID: apiModel.tenantID!,
      formTemplateID: apiModel.formTemplateID!,
      formSubmissionFields:
          apiModel.formSubmissionFields!.map((x) => FormSubmissionField.fromApiModel(x)).toList(),
    );
  }

  String tenantID;

  String formTemplateID;

  List<FormSubmissionField> formSubmissionFields;

  @override
  api_mod.FormSubmissionPackage toApiModel() {
    return api_mod.FormSubmissionPackage()
      ..tenantID = tenantID
      ..formTemplateID = formTemplateID
      ..formSubmissionFields = formSubmissionFields.map((x) => x.toApiModel()).toList();
  }
}

// Originally generated by nucleus_one_utilities.
class FormSubmissionField extends Entity with NucleusOneAppDependent, FormTemplateFieldMixin {
  FormSubmissionField._({
    NucleusOneApp? app,
    required this.formTemplateFieldID,
  }) {
    this.app = app ?? getIt.get<NucleusOneApp>();
  }

  factory FormSubmissionField.fromFormTemplateField(FormTemplateField field) {
    final fsf = FormSubmissionField._(
      formTemplateFieldID: null,
      app: field.app,
    );
    // Copy the field values from the FormTemplateField to the FormSubmissionField instance
    FormTemplateFieldMixin.fromApiModel(
      fsf,
      field.toApiModel(),
      app: field.app,
    );
    return fsf;
  }

  factory FormSubmissionField.fromApiModel(
    api_mod.FormSubmissionField apiModel, {
    NucleusOneApp? app,
  }) {
    final model = FormSubmissionField._(
      formTemplateFieldID: apiModel.formTemplateFieldID,
    );
    FormTemplateFieldMixin.fromApiModel(
      model,
      apiModel,
      app: app,
    );
    return model;
  }

  @override
  api_mod.FormSubmissionField toApiModel() {
    final apiModel = api_mod.FormSubmissionField()..formTemplateFieldID = formTemplateFieldID;
    _formTemplateFieldMixinToApiModel(apiModel);
    return apiModel;
  }

  String? formTemplateFieldID;
}
